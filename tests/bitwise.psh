// Test bitwise operations

// Bitwise AND
assert((0 & 0) == 0);
assert((1 & 0) == 0);
assert((0 & 1) == 0);
assert((1 & 1) == 1);
assert((0b1100 & 0b1010) == 0b1000);
assert((12 & 10) == 8);

// Bitwise OR
assert((0 | 0) == 0);
assert((1 | 0) == 1);
assert((0 | 1) == 1);
assert((1 | 1) == 1);
assert((0b1100 | 0b1010) == 0b1110);
assert((12 | 10) == 14);

// Bitwise XOR
assert((0 ^ 0) == 0);
assert((1 ^ 0) == 1);
assert((0 ^ 1) == 1);
assert((1 ^ 1) == 0);
assert((0b1100 ^ 0b1010) == 0b0110);
assert((12 ^ 10) == 6);

// Left shift
assert((1 << 0) == 1);
assert((1 << 1) == 2);
assert((1 << 8) == 256);
assert((0b1100 << 2) == 0b110000);
assert((12 << 2) == 48);

// Right shift
assert((1 >> 0) == 1);
assert((2 >> 1) == 1);
assert((256 >> 8) == 1);
assert((0b1100 >> 2) == 0b11);
assert((12 >> 2) == 3);

// Test with negative numbers
assert((-10 & 12) == 4);
assert((-10 | 12) == -2);
assert((-10 ^ 12) == -6);
assert((-10 << 2) == -40);
assert((-10 >> 2) == -3);

$println("all bitwise tests passed");
