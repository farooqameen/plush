
// In-place quicksort benchmark

// Pseudo-random number generator (LCG)
let var lcg_seed = 1;
fun rand_init(seed) {
    lcg_seed = seed & 0x7FFFFFFF;
}
fun rand_int(max_val) {
    lcg_seed = (lcg_seed * 1103515245 + 12345) & 0x7FFFFFFF;
    return lcg_seed % max_val;
}

// Partition function for quicksort
fun partition(arr, low, high) {
    let pivot = arr[high];
    let var i = low - 1;

    for (let var j = low; j < high; ++j) {
        if (arr[j] < pivot) {
            i = i + 1;
            let temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
    }

    let temp = arr[i + 1];
    arr[i + 1] = arr[high];
    arr[high] = temp;
    return i + 1;
}

// Quicksort implementation
fun quicksort(arr, low, high) {
    if (low < high) {
        let pi = partition(arr, low, high);
        quicksort(arr, low, pi - 1);
        quicksort(arr, pi + 1, high);
    }
}

// --- Benchmark ---

let NUM_ELEMENTS = 1_000_000;
let arr = Array.with_size(NUM_ELEMENTS, 0);

rand_init(42);
for (let var i = 0; i < NUM_ELEMENTS; ++i) {
    arr[i] = rand_int(1000000);
}

let start_time = $time_current_ms();

quicksort(arr, 0, arr.len - 1);

let end_time = $time_current_ms();
let elapsed_ms = end_time - start_time;

$println("Quicksort of " + NUM_ELEMENTS.to_s() + " elements took " + elapsed_ms.to_s() + " ms.");

// Verify that the array is sorted
let var is_sorted = true;
for (let var i = 0; i < arr.len - 1; ++i) {
    if (arr[i] > arr[i+1]) {
        is_sorted = false;
        break;
    }
}

if (is_sorted) {
    $println("Array is sorted correctly.");
} else {
    $println("Sorting failed.");
}
