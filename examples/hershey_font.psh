// Hershey Text Example for Plush

let WIDTH  = 640;
let HEIGHT = 480;
let CYAN   = 0xFF_60_FF_D0;
let AA_MUL = 2;	// subpixels for antialiasing

// --- Glyph Vectors ---

let LEADING = 40;
let ASCENT  = 30;

// Character Data from https://paulbourke.net/dataformats/hershey/
// - from ' ' to '~', in ascii order (0x20 to 0x7E)
// - the first integer is the width of the glyph
// - the second list is the x,y pen coordinates, except (-1,-1) is pen up
let simplex = [
[16, [] ],
[10, [5,21,5,7,-1,-1,5,2,4,1,5,0,6,1,5,2] ],
[16, [4,21,4,14,-1,-1,12,21,12,14] ],
[21, [11,25,4,-7,-1,-1,17,25,10,-7,-1,-1,4,12,18,12,-1,-1,3,6,17,6] ],
[20, [8,25,8,-4,-1,-1,12,25,12,-4,-1,-1,17,18,15,20,12,21,8,21,5,20,3,18,
  3,16,4,14,5,13,7,12,13,10,15,9,16,8,17,6,17,3,15,1,12,0,8,0,5,1,3,3] ],
[24, [21,21,3,0,-1,-1,8,21,10,19,10,17,9,15,7,14,5,14,3,16,3,18,4,20,6,21,
  8,21,10,20,13,19,16,19,19,20,21,21,-1,-1,17,7,15,6,14,4,14,2,16,0,18,0,
  20,1,21,3,21,5,19,7,17,7] ],
[26, [23,12,23,13,22,14,21,14,20,13,19,11,17,6,15,3,13,1,11,0,7,0,5,1,4,2,
  3,4,3,6,4,8,5,9,12,13,13,14,14,16,14,18,13,20,11,21,9,20,8,18,8,16,9,13,
  11,10,16,3,18,1,20,0,22,0,23,1,23,2] ],
[10, [5,19,4,20,5,21,6,20,6,18,5,16,4,15] ],
[14, [11,25,9,23,7,20,5,16,4,11,4,7,5,2,7,-2,9,-5,11,-7] ],
[14, [3,25,5,23,7,20,9,16,10,11,10,7,9,2,7,-2,5,-5,3,-7] ],
[16, [8,21,8,9,-1,-1,3,18,13,12,-1,-1,13,18,3,12] ],
[26, [13,18,13,0,-1,-1,4,9,22,9] ],
[10, [6,1,5,0,4,1,5,2,6,1,6,-1,5,-3,4,-4] ],
[26, [4,9,22,9] ],
[10, [5,2,4,1,5,0,6,1,5,2] ],
[22, [20,25,2,-7] ],
[20, [9,21,6,20,4,17,3,12,3,9,4,4,6,1,9,0,11,0,14,1,16,4,17,9,17,12,16,17,
  14,20,11,21,9,21] ],
[20, [6,17,8,18,11,21,11,0] ],
[20, [4,16,4,17,5,19,6,20,8,21,12,21,14,20,15,19,16,17,16,15,15,13,13,10,3,
  0,17,0] ],
[20, [5,21,16,21,10,13,13,13,15,12,16,11,17,8,17,6,16,3,14,1,11,0,8,0,5,1,
  4,2,3,4] ],
[20, [13,21,3,7,18,7,-1,-1,13,21,13,0] ],
[20, [15,21,5,21,4,12,5,13,8,14,11,14,14,13,16,11,17,8,17,6,16,3,14,1,11,0,
  8,0,5,1,4,2,3,4] ],
[20, [16,18,15,20,12,21,10,21,7,20,5,17,4,12,4,7,5,3,7,1,10,0,11,0,14,1,16,
  3,17,6,17,7,16,10,14,12,11,13,10,13,7,12,5,10,4,7] ],
[20, [17,21,7,0,-1,-1,3,21,17,21] ],
[20, [8,21,5,20,4,18,4,16,5,14,7,13,11,12,14,11,16,9,17,7,17,4,16,2,15,1,12,
  0,8,0,5,1,4,2,3,4,3,7,4,9,6,11,9,12,13,13,15,14,16,16,16,18,15,20,12,21,
  8,21] ],
[20, [16,14,15,11,13,9,10,8,9,8,6,9,4,11,3,14,3,15,4,18,6,20,9,21,10,21,13,
  20,15,18,16,14,16,9,15,4,13,1,10,0,8,0,5,1,4,3] ],
[10, [5,14,4,13,5,12,6,13,5,14,-1,-1,5,2,4,1,5,0,6,1,5,2] ],
[10, [5,14,4,13,5,12,6,13,5,14,-1,-1,6,1,5,0,4,1,5,2,6,1,6,-1,5,-3,4,-4] ],
[24, [20,18,4,9,20,0] ],
[26, [4,12,22,12,-1,-1,4,6,22,6] ],
[24, [4,18,20,9,4,0] ],
[18, [3,16,3,17,4,19,5,20,7,21,11,21,13,20,14,19,15,17,15,15,14,13,13,12,9,
  10,9,7,-1,-1,9,2,8,1,9,0,10,1,9,2] ],
[27, [18,13,17,15,15,16,12,16,10,15,9,14,8,11,8,8,9,6,11,5,14,5,16,6,17,8,
  -1,-1,12,16,10,14,9,11,9,8,10,6,11,5,-1,-1,18,16,17,8,17,6,19,5,21,5,23,
  7,24,10,24,12,23,15,22,17,20,19,18,20,15,21,12,21,9,20,7,19,5,17,4,15,3,
  12,3,9,4,6,5,4,7,2,9,1,12,0,15,0,18,1,20,2,21,3,-1,-1,19,16,18,8,18,6,19,5] ],
[18, [9,21,1,0,-1,-1,9,21,17,0,-1,-1,4,7,14,7] ],
[21, [4,21,4,0,-1,-1,4,21,13,21,16,20,17,19,18,17,18,15,17,13,16,12,13,11,
  -1,-1,4,11,13,11,16,10,17,9,18,7,18,4,17,2,16,1,13,0,4,0] ],
[21, [18,16,17,18,15,20,13,21,9,21,7,20,5,18,4,16,3,13,3,8,4,5,5,3,7,1,9,0,
  13,0,15,1,17,3,18,5] ],
[21, [4,21,4,0,-1,-1,4,21,11,21,14,20,16,18,17,16,18,13,18,8,17,5,16,3,14,
  1,11,0,4,0] ],
[19, [4,21,4,0,-1,-1,4,21,17,21,-1,-1,4,11,12,11,-1,-1,4,0,17,0] ],
[18, [4,21,4,0,-1,-1,4,21,17,21,-1,-1,4,11,12,11] ],
[21, [18,16,17,18,15,20,13,21,9,21,7,20,5,18,4,16,3,13,3,8,4,5,5,3,7,1,9,0,
  13,0,15,1,17,3,18,5,18,8,-1,-1,13,8,18,8] ],
[22, [4,21,4,0,-1,-1,18,21,18,0,-1,-1,4,11,18,11] ],
[8, [4,21,4,0] ],
[16, [12,21,12,5,11,2,10,1,8,0,6,0,4,1,3,2,2,5,2,7] ],
[21, [4,21,4,0,-1,-1,18,21,4,7,-1,-1,9,12,18,0] ],
[17, [4,21,4,0,-1,-1,4,0,16,0] ],
[24, [4,21,4,0,-1,-1,4,21,12,0,-1,-1,20,21,12,0,-1,-1,20,21,20,0] ],
[22, [4,21,4,0,-1,-1,4,21,18,0,-1,-1,18,21,18,0] ],
[22, [9,21,7,20,5,18,4,16,3,13,3,8,4,5,5,3,7,1,9,0,13,0,15,1,17,3,18,5,19,
  8,19,13,18,16,17,18,15,20,13,21,9,21] ],
[21, [4,21,4,0,-1,-1,4,21,13,21,16,20,17,19,18,17,18,14,17,12,16,11,13,10,
  4,10] ],
[22, [9,21,7,20,5,18,4,16,3,13,3,8,4,5,5,3,7,1,9,0,13,0,15,1,17,3,18,5,19,
  8,19,13,18,16,17,18,15,20,13,21,9,21,-1,-1,12,4,18,-2] ],
[21, [4,21,4,0,-1,-1,4,21,13,21,16,20,17,19,18,17,18,15,17,13,16,12,13,11,
  4,11,-1,-1,11,11,18,0] ],
[20, [17,18,15,20,12,21,8,21,5,20,3,18,3,16,4,14,5,13,7,12,13,10,15,9,16,8,
  17,6,17,3,15,1,12,0,8,0,5,1,3,3] ],
[16, [8,21,8,0,-1,-1,1,21,15,21] ],
[22, [4,21,4,6,5,3,7,1,10,0,12,0,15,1,17,3,18,6,18,21] ],
[18, [1,21,9,0,-1,-1,17,21,9,0] ],
[24, [2,21,7,0,-1,-1,12,21,7,0,-1,-1,12,21,17,0,-1,-1,22,21,17,0] ],
[20, [3,21,17,0,-1,-1,17,21,3,0] ],
[18, [1,21,9,11,9,0,-1,-1,17,21,9,11] ],
[20, [17,21,3,0,-1,-1,3,21,17,21,-1,-1,3,0,17,0] ],
[14, [4,25,4,-7,-1,-1,5,25,5,-7,-1,-1,4,25,11,25,-1,-1,4,-7,11,-7] ],
[14, [0,21,14,-3] ],
[14, [9,25,9,-7,-1,-1,10,25,10,-7,-1,-1,3,25,10,25,-1,-1,3,-7,10,-7] ],
[16, [6,15,8,18,10,15,-1,-1,3,12,8,17,13,12,-1,-1,8,17,8,0] ],
[16, [0,-2,16,-2] ],
[10, [6,21,5,20,4,18,4,16,5,15,6,16,5,17] ],
[19, [15,14,15,0,-1,-1,15,11,13,13,11,14,8,14,6,13,4,11,3,8,3,6,4,3,6,1,8,
  0,11,0,13,1,15,3] ],
[19, [4,21,4,0,-1,-1,4,11,6,13,8,14,11,14,13,13,15,11,16,8,16,6,15,3,13,1,
  11,0,8,0,6,1,4,3] ],
[18, [15,11,13,13,11,14,8,14,6,13,4,11,3,8,3,6,4,3,6,1,8,0,11,0,13,1,15,3] ],
[19, [15,21,15,0,-1,-1,15,11,13,13,11,14,8,14,6,13,4,11,3,8,3,6,4,3,6,1,8,
  0,11,0,13,1,15,3] ],
[18, [3,8,15,8,15,10,14,12,13,13,11,14,8,14,6,13,4,11,3,8,3,6,4,3,6,1,8,0,
  11,0,13,1,15,3] ],
[12, [10,21,8,21,6,20,5,17,5,0,-1,-1,2,14,9,14] ],
[19, [15,14,15,-2,14,-5,13,-6,11,-7,8,-7,6,-6,-1,-1,15,11,13,13,11,14,8,14,
  6,13,4,11,3,8,3,6,4,3,6,1,8,0,11,0,13,1,15,3] ],
[19, [4,21,4,0,-1,-1,4,10,7,13,9,14,12,14,14,13,15,10,15,0] ],
[8, [3,21,4,20,5,21,4,22,3,21,-1,-1,4,14,4,0] ],
[10, [5,21,6,20,7,21,6,22,5,21,-1,-1,6,14,6,-3,5,-6,3,-7,1,-7] ],
[17, [4,21,4,0,-1,-1,14,14,4,4,-1,-1,8,8,15,0] ],
[8, [4,21,4,0] ],
[30, [4,14,4,0,-1,-1,4,10,7,13,9,14,12,14,14,13,15,10,15,0,-1,-1,15,10,18,
  13,20,14,23,14,25,13,26,10,26,0] ],
[19, [4,14,4,0,-1,-1,4,10,7,13,9,14,12,14,14,13,15,10,15,0] ],
[19, [8,14,6,13,4,11,3,8,3,6,4,3,6,1,8,0,11,0,13,1,15,3,16,6,16,8,15,11,13,
  13,11,14,8,14] ],
[19, [4,14,4,-7,-1,-1,4,11,6,13,8,14,11,14,13,13,15,11,16,8,16,6,15,3,13,1,
  11,0,8,0,6,1,4,3] ],
[19, [15,14,15,-7,-1,-1,15,11,13,13,11,14,8,14,6,13,4,11,3,8,3,6,4,3,6,1,8,
  0,11,0,13,1,15,3] ],
[13, [4,14,4,0,-1,-1,4,8,5,11,7,13,9,14,12,14] ],
[17, [14,11,13,13,10,14,7,14,4,13,3,11,4,9,6,8,11,7,13,6,14,4,14,3,13,1,10,
  0,7,0,4,1,3,3] ],
[12, [5,21,5,4,6,1,8,0,10,0,-1,-1,2,14,9,14] ],
[19, [4,14,4,4,5,1,7,0,10,0,12,1,15,4,-1,-1,15,14,15,0] ],
[16, [2,14,8,0,-1,-1,14,14,8,0] ],
[22, [3,14,7,0,-1,-1,11,14,7,0,-1,-1,11,14,15,0,-1,-1,19,14,15,0] ],
[17, [3,14,14,0,-1,-1,14,14,3,0] ],
[16, [2,14,8,0,-1,-1,14,14,8,0,6,-4,4,-6,2,-7,1,-7] ],
[17, [14,14,3,0,-1,-1,3,14,14,14,-1,-1,3,0,14,0] ],
[14, [9,25,7,24,6,23,5,21,5,19,6,17,7,16,8,14,8,12,6,10,-1,-1,7,24,6,22,6,
  20,7,18,8,17,9,15,9,13,8,11,4,9,8,7,9,5,9,3,8,1,7,0,6,-2,6,-4,7,-6,-1,-1,
  6,8,8,6,8,4,7,2,6,1,5,-1,5,-3,6,-5,7,-6,9,-7] ],
[8, [4,25,4,-7] ],
[14, [5,25,7,24,8,23,9,21,9,19,8,17,7,16,6,14,6,12,8,10,-1,-1,7,24,8,22,8,
  20,7,18,6,17,5,15,5,13,6,11,10,9,6,7,5,5,5,3,6,1,7,0,8,-2,8,-4,7,-6,-1,-1,
  8,8,6,6,6,4,7,2,8,1,9,-1,9,-3,8,-5,7,-6,5,-7] ],
[24, [3,6,3,8,4,11,6,12,8,12,10,11,14,8,16,7,18,7,20,8,21,10,-1,-1,3,8,4,10,
  6,11,8,11,10,10,14,7,16,6,18,6,20,7,21,10,21,12] ],
[20, [2,0,2,28,18,28,18,0,2,0] ], // tofu
];

// glyph image cache
let glyph = Array.with_size(96, 0);

// --- Blitting Infra ---

class Image
{
    init(self, width, height)
    {
        assert(width instanceof Int64);
        assert(height instanceof Int64);

        self.width = width;
        self.height = height;
        self.bytes = ByteArray.with_size(4 * width * height);
    }

    // The color is specified as an u32 value in RGBA32 format
    get_pixel(self, x, y)
    {
        let idx = y * self.width + x;
        return(self.bytes.read_u32(idx));
    }

    set_pixel(self, x, y, color)
    {
        let idx = y * self.width + x;
        self.bytes.write_u32(idx, color);
    }

    // Copy a source image into this image at a given position
    blit(self, src_img, dst_x, dst_y)
    {
        let var dst_x = dst_x;
        let var dst_y = dst_y;
        let var src_x = 0;
        let var src_y = 0;
        let var width = src_img.width;
        let var height = src_img.height;

        if (dst_x < 0)
        {
            src_x = -dst_x;
            width = width + dst_x;
            dst_x = 0;
        }

        if (dst_y < 0)
        {
            src_y = -dst_y;
            height = height + dst_y;
            dst_y = 0;
        }

        if (dst_x + width > self.width)
        {
            width = self.width - dst_x;
        }

        if (dst_y + height > self.height)
        {
            height = self.height - dst_y;
        }

        if (width <= 0 || height <= 0)
        {
            return;
        }

        // Number of bytes per row of the images
        let dst_pitch = self.width * 4;
        let src_pitch = src_img.width * 4;

        for (let var j = 0; j < height; ++j)
        {
            let src_idx = (src_y + j) * src_pitch + src_x * 4;
            let dst_idx = (dst_y + j) * dst_pitch + dst_x * 4;
            self.bytes.memcpy(dst_idx, src_img.bytes, src_idx, width * 4);
        }
    }
}

// --- Graphics Functions ---

// Bresenham
fun draw_line(buffer, x0, y0, x1, y1, color) {
    let sx = (x0 < x1 ? 1 : -1);
    let sy = (y0 < y1 ? 1 : -1);
    let dx = (x1 - x0).abs();
    let dy = (y1 - y0).abs();

    let var err = dx - dy;
    let var x = x0;
    let var y = y0;

    loop {
        buffer.set_pixel(x, y, color);
        if (x == x1 && y == y1) {
            return;
        }

        let e2 = 2 * err;
        if (e2 > -dy) {
            err = err - dy;
            x = x + sx;
        }

        if (e2 < dx) {
            err = err + dx;
            y = y + sy;
        }
    }
}

fun draw_thick_line(buffer, x0, y0, x1, y1, color) {
    for(let var ay=0; ay < AA_MUL; ay = ay + 1) {
        for(let var ax=0; ax < AA_MUL; ax = ax + 1) {
            draw_line(buffer, x0+ax, y0+ay, x1+ax, y1+ay, color);
        }
    }
}

fun render_glyph(x, y, width, height, pts) {
    let i = Image(width, height);
    let var ox = -1;
    let var oy = -1;
    for(let var j=0; j < pts.len; j = j+2) {
        let draw = (pts[j] != -1 || pts[j+1] != -1);
        let nx = (draw ? x + AA_MUL*pts[j]   : -1);
        let ny = (draw ? y - AA_MUL*pts[j+1] : -1);
        if (ox != -1 &&  oy != -1 && nx != -1 && ny != -1) {
            draw_thick_line(i, ox, oy, nx, ny, CYAN);
        }
        ox = nx;
        oy = ny;
    }
    return i;
}

fun get_r(p) { return (p >> 16) & 0xFF; }
fun get_g(p) { return (p >>  8) & 0xFF; }
fun get_b(p) { return (p >>  0) & 0xFF; }
fun set_rgb(r,g,b) {
    return (0xFF << 24) | (r << 16) | (g << 8) | b;
}

fun div(x,y) {
    return (x.to_f()/y.to_f()).floor();
}

fun down_sample(hi) {
    let dx = hi.width;
    let dy = hi.height;
    let lo = Image(div(dx,AA_MUL), div(dy,AA_MUL));
    for(let var iy = 0; iy < dy; iy = iy + AA_MUL) {
        for(let var ix = 0; ix < dx; ix = ix + AA_MUL) {
            let var r = 0;
            let var g = 0;
            let var b = 0;
            let var c = 0;
            for(let var ay = 0; ay < AA_MUL; ay = ay + 1) {
                for(let var ax = 0; ax < AA_MUL; ax = ax + 1) {
                    let pix = hi.get_pixel(ix+ax, iy+ay);
                    r = r + get_r(pix);
                    g = g + get_g(pix);
                    b = b + get_b(pix);
                    c = c + 1;
                }
            }
            lo.set_pixel(div(ix,AA_MUL), div(iy,AA_MUL),
                set_rgb(div(r,c), div(g,c), div(b,c)));
        }
    }
    return lo;
}

fun draw_char(buffer, x, y, c) {
    let n = (32 <= c && c <= 126 ? c-32 : 127-32);
    let adv = simplex[n][0];
    let pts = simplex[n][1];

    if(buffer != 0) {
        if(glyph[n] == 0) {
            glyph[n] = down_sample(render_glyph(0, AA_MUL*ASCENT,
                           AA_MUL*adv, AA_MUL*LEADING, pts));
        }
        buffer.blit(glyph[n], x, y-ASCENT);
    }
    return x+adv;
}

fun utf8_advance(c) {
    if((c & 0x80) == 0x00) return 1;
    if((c & 0xe0) == 0xc0) return 2;
    if((c & 0xf0) == 0xe0) return 3;
    return 4;
}

fun draw_string(buffer, ix, y, s) {
    let var x = ix;
    let var i = 0;
    while(i < s.len) {
        let c = s.byte_at(i);
        x = draw_char(buffer, x, y, c);
        i = i + utf8_advance(c);
    }
    return x;
}

// --- Main Loop ---

let frame_buffer = Image(WIDTH, HEIGHT);
let window = $window_create(WIDTH, HEIGHT, "Hershey Text", 0);

let s = ($cmd_num_args() > 1 ? $cmd_get_arg(1) : "Hello, Beautiful World!");
let s_w = draw_string(0, 0, 0, s);

// Drawable ASCII chars
// 32 to 126, 94 chars
// Go with rows of 16
let char_lines = [];
let CHARS_PER_LINE = 28;
let var char_idx = 32;
while (char_idx < 126)
{
    let var char_s = '';
    for (let var i = 0; i < CHARS_PER_LINE; ++i)
    {
        char_s = char_s + String.from_codepoint(char_idx + i);
    }
    char_lines.push(char_s);
    char_idx = char_idx + char_s.len;
}

let var count = 0;
loop {
    // --- Drawing ---
    frame_buffer.bytes.zero_fill();

    let start_time = $time_current_ms();

    draw_string(frame_buffer, (WIDTH-s_w)>>1, (HEIGHT>>2), s);
    let count_str = "(" + count.to_s() + ")";
    let c_w = draw_string(0, 0, 0, count_str);
    draw_string(frame_buffer, (WIDTH-c_w)>>1, (HEIGHT>>2) + 60, count_str);
    ++count;
    for (let var i = 0; i < char_lines.len; ++i)
        draw_string(frame_buffer, 20, (HEIGHT>>1) + 60 + (40 * i), char_lines[i]);

    let end_time = $time_current_ms();
    $print('redraw time: ');
    $print(end_time - start_time);
    $println('ms');

    $window_draw_frame(window, frame_buffer.bytes);

    $actor_sleep(200); // Limit the frame rate

    // --- Event Handling ---
    let msg = $actor_poll();

    if (!(msg instanceof UIEvent)) {
        continue;
    }
    if (msg.kind == 'CLOSE_WINDOW' || (msg.kind == 'KEY_DOWN' && msg.key == 'ESCAPE')) {
        break;
    }
}
